function Get-DateNamedFiles {
	<#
		.SYNOPSIS
		Filters files named after a date/time format based on a regular expression to capture dates and start/end dates specified. 

		.DESCRIPTION
		Given a PSObject containing filesystem objects (files), returns an object of the filesystem objects that fall within the specified start/end dates based on a regular expression for parsing the date pattern in the filename. Defaults to IIS file naming standards but accepts optional regex with 3 cap groups. Regex groups assumed to be in order of year/month/date unless the -reverse switch is specified which makes it date/month/year. StartDate and EndDate switches will specify dates to filter for, and if not specified default to forever/now. Does not filter to minute or second at this time. 

		.PARAMETER InputObject
		PSObject to search which should be generated by get-childitem. 

		.PARAMETER StartDate
		Specify start date to search for in ISO 8061 format

		.PARAMETER EndDate
		Specify end date to search for in ISO 8061 format

		.PARAMETER Regex
		Regular expression to use for determining file dates. Needs three capture groups at this time in order of year, month, day unless the -ReverseRegex is specified in which case it's day,month,year. 

		.PARAMETER ReverseRegex
		If specified, this will switch the regex pattern to capture day/month/year rather than year/month/date

		.EXAMPLE
		PS C:\>Get-DateNamedFiles $myObject -StartDate (get-date -Date 4/10/2018 -Format o)
	#>

	param (
		[parameter(mandatory=$true, position=0)]
		[psobject]$InputObject,

		[parameter(mandatory=$false, position=1)]
		[string]$StartDate=(get-date -Date 1970-01-01T00:00:00Z -format o),

		[parameter(mandatory=$false, position=2)]
		[string]$EndDate=(get-date -Format o),

		[parameter(mandatory=$false, position=3)]
		[string]$Regex='^u_ex(\d\d)(\d\d)(\d\d).*\.log$',

		[parameter(mandatory=$false, position=3)]
		[switch]$ReverseRegex
	)
	#init array for matched filenames
	$fileNameMatches=@()

	foreach ($file in $InputObject){
		# We only care about files in this function for now. 
		if ($file.Attributes -like "Archive"){
			$file.Name | Where-Object {$_ -match $Regex} | Out-Null
			if ($matches.count -ne 4){Write-Debug "$file.Name does not match all capture groups of regular expression $Regex"}
			else {
				switch ($ReverseRegex)
				{
					$true{
						$year=$Matches[3]
						$month=$Matches[2]
						$day=$Matches[1]
					}
					$false{
						$year=$Matches[1]
						$month=$Matches[2]
						$day=$Matches[3]
					}
				}
				#convert to 4 digit date if it is not. Sorry if you're in the year 2100 and trying to parse files from 2099, this part will break if you didn't do 4 digit years. That's your fault future person, because I'm dead.
				if ($year.length -lt 4){$year=(get-date -format yyyy).Substring(0,(4-$year.Length))+$year}
				if ($year.Length -gt 4){throw "PLANNED OBSOLESCENCE!!!! You people in the future must bow to my mercy!!! WELCOME TO THE 21ST CENTURY SUCKERS! THIS IS HOW WE DO IT!!!"}
				$fileDate=(Get-Date -Year $year -Month $month -day $day -format o)
				Write-Debug "The date of $file.Name corresponds to $fileDate"
				if ($fileDate -ge $StartDate -and $fileDate -le $EndDate){
					#These are the droids we're looking for
					$fileNameMatches+=$file.Name
				}
			}
		}
		else {Write-Debug "$file.Name is not a file."}
		# now we construct our return based on the filenames in the array
	}
	$matchCount=$fileNameMatches.count
	Write-Host "Get-FilesByNameDate found $matchCount files that match the regular expression of $Regex"
	$returnObject=$InputObject | Where-Object {$fileNameMatches -contains $_.Name}
	return $returnObject
}

#Example of how to parse this return to get hitcount from this return list in IIS: where merp is the return object

#foreach ($derp in $merp){$hitcount+=(Get-Content $derp.FullName | Select-String -AllMatches '^\d{4}-\d{2}-\d{2}').count}

# here's a regular expression to omit log entries with "cloudflare" or HealthCheck.aspx
#^\d{4}-\d{2}-\d{2}(?!.*Cloudflare)(?!.*HealthCheck\.aspx).*$